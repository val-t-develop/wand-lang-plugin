// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: WandLexer.flex

package com.valtdevelop.wandlangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.valtdevelop.wandlangplugin.psi.WandTypes.*;


public class WandLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\2\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\10\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\2\33"+
    "\1\34\1\35\1\36\5\33\1\37\13\33\1\40\2\33"+
    "\1\41\1\42\1\43\1\44\1\33\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\33"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\33\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\6\0\1\3\32\0\1\1"+
    "\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\101";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\3\25"+
    "\1\35\1\36\1\37\2\25\1\40\7\25\1\41\1\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\0\1\47\1\50"+
    "\1\51\2\0\1\52\1\53\1\54\1\55\1\56\1\0"+
    "\1\57\1\60\1\0\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\11\25\1\67\7\25\1\70\23\25\1\71\1\72"+
    "\1\73\2\0\1\74\1\75\1\76\20\25\1\77\3\25"+
    "\1\100\2\25\1\101\17\25\1\102\3\25\1\103\1\0"+
    "\1\104\1\25\1\105\1\25\1\106\1\107\1\25\1\110"+
    "\5\25\1\111\4\25\1\112\4\25\1\113\1\25\1\114"+
    "\12\25\1\115\2\25\1\116\1\117\2\25\1\0\1\25"+
    "\1\120\1\121\1\122\1\123\4\25\1\124\1\125\1\126"+
    "\12\25\1\127\1\25\1\130\2\25\1\131\2\25\1\132"+
    "\1\0\3\25\1\133\3\25\1\134\2\25\1\135\3\25"+
    "\1\136\1\137\1\140\1\141\1\25\1\142\2\25\1\0"+
    "\2\25\1\143\1\144\1\145\3\25\1\146\1\147\4\25"+
    "\1\0\1\150\1\151\6\25\1\152\1\0\2\25\1\153"+
    "\1\154\1\25\1\155\1\0\1\156\1\157\1\25\1\0"+
    "\1\25\1\0\1\160\4\0\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\102\0\102\0\u0210\0\u0252\0\102\0\u0294\0\102\0\u02d6"+
    "\0\u0318\0\u035a\0\102\0\102\0\u039c\0\u03de\0\u0420\0\102"+
    "\0\u0462\0\u0462\0\u0462\0\u0462\0\u0462\0\102\0\102\0\u04a4"+
    "\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4"+
    "\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4"+
    "\0\102\0\u0906\0\102\0\102\0\102\0\u0108\0\102\0\u0948"+
    "\0\102\0\102\0\102\0\u098a\0\u09cc\0\102\0\102\0\102"+
    "\0\102\0\102\0\u0a0e\0\u0a50\0\102\0\u0a92\0\u0ad4\0\102"+
    "\0\102\0\102\0\u0b16\0\102\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0462\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c"+
    "\0\u145e\0\102\0\102\0\102\0\u14a0\0\u14e2\0\102\0\102"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u0462\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u0462\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e"+
    "\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\u0462\0\u1ef0\0\u1f32\0\u1f74\0\u0a0e\0\u1fb6\0\102\0\u1ff8"+
    "\0\u0462\0\u203a\0\u0462\0\u0462\0\u207c\0\u0462\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u0462\0\u2208\0\u224a\0\u228c\0\u22ce"+
    "\0\u0462\0\u2310\0\u2352\0\u2394\0\u23d6\0\u0462\0\u2418\0\u0462"+
    "\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628"+
    "\0\u266a\0\u26ac\0\u0462\0\u26ee\0\u2730\0\u0462\0\u0462\0\u2772"+
    "\0\u27b4\0\u27f6\0\u2838\0\u0462\0\u0462\0\u0462\0\u0462\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u0462\0\u2982\0\u0462\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16"+
    "\0\u0462\0\u2c58\0\u0462\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u0462\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u0462\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u0462\0\u2fb2\0\u2ff4\0\u0462\0\u3036\0\u3078\0\u30ba"+
    "\0\u0462\0\u0462\0\u0462\0\u0462\0\u30fc\0\u0462\0\u313e\0\u3180"+
    "\0\u31c2\0\u3204\0\u3246\0\u0462\0\u0462\0\u0462\0\u3288\0\u32ca"+
    "\0\u330c\0\u0462\0\u0462\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456"+
    "\0\u0462\0\u0462\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2"+
    "\0\u0462\0\u3624\0\u3666\0\u36a8\0\u0462\0\u0462\0\u36ea\0\u0462"+
    "\0\u372c\0\u0462\0\u0462\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u0462"+
    "\0\u3876\0\u38b8\0\u38fa\0\u393c\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\30\2\31"+
    "\1\32\1\33\1\34\1\35\1\31\1\36\1\2\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\31\1\50\1\31\1\51\1\31\1\52\1\31\1\53"+
    "\1\54\1\55\1\56\1\31\1\57\1\60\3\31\1\61"+
    "\1\62\1\63\1\64\1\2\103\0\3\3\125\0\1\65"+
    "\52\0\5\66\1\67\34\66\1\70\37\66\27\0\1\71"+
    "\61\0\1\72\17\0\1\73\52\0\10\74\1\0\31\74"+
    "\1\75\37\74\27\0\1\76\66\0\1\77\12\0\1\100"+
    "\70\0\1\101\10\0\1\102\65\0\1\103\4\0\1\104"+
    "\6\0\1\105\73\0\3\22\15\0\1\106\61\0\3\22"+
    "\104\0\1\107\1\110\101\0\1\111\101\0\1\112\1\113"+
    "\72\0\3\31\6\0\7\31\4\0\30\31\34\0\1\114"+
    "\73\0\3\31\6\0\7\31\4\0\1\31\1\115\26\31"+
    "\26\0\3\31\6\0\7\31\4\0\15\31\1\116\1\31"+
    "\1\117\6\31\1\120\1\31\26\0\3\31\6\0\7\31"+
    "\4\0\1\121\6\31\1\122\2\31\1\123\2\31\1\124"+
    "\12\31\26\0\3\31\6\0\7\31\4\0\4\31\1\125"+
    "\10\31\1\126\12\31\26\0\3\31\6\0\7\31\4\0"+
    "\12\31\1\127\12\31\1\130\2\31\26\0\3\31\6\0"+
    "\7\31\4\0\1\131\7\31\1\132\1\31\1\133\2\31"+
    "\1\134\12\31\26\0\3\31\6\0\7\31\4\0\15\31"+
    "\1\135\12\31\26\0\3\31\6\0\7\31\4\0\5\31"+
    "\1\136\5\31\1\137\1\140\13\31\26\0\3\31\6\0"+
    "\7\31\4\0\15\31\1\141\12\31\26\0\3\31\6\0"+
    "\7\31\4\0\1\142\3\31\1\143\15\31\1\144\5\31"+
    "\26\0\3\31\6\0\7\31\4\0\1\145\16\31\1\146"+
    "\2\31\1\147\5\31\26\0\3\31\6\0\7\31\4\0"+
    "\4\31\1\150\23\31\26\0\3\31\6\0\7\31\4\0"+
    "\7\31\1\151\11\31\1\152\1\153\1\31\1\154\1\31"+
    "\1\155\1\31\26\0\3\31\6\0\7\31\4\0\7\31"+
    "\1\156\7\31\1\157\10\31\26\0\3\31\6\0\7\31"+
    "\4\0\15\31\1\160\12\31\26\0\3\31\6\0\7\31"+
    "\4\0\7\31\1\161\20\31\34\0\1\162\46\0\1\163"+
    "\3\0\2\66\2\0\75\66\11\0\1\164\71\0\2\74"+
    "\2\0\75\74\1\0\3\103\1\0\7\103\1\165\65\103"+
    "\1\0\2\104\2\0\75\104\73\0\1\166\36\0\1\167"+
    "\101\0\1\170\1\171\72\0\3\31\6\0\7\31\4\0"+
    "\20\31\1\172\7\31\26\0\3\31\6\0\7\31\4\0"+
    "\15\31\1\173\12\31\26\0\3\31\6\0\7\31\4\0"+
    "\4\31\1\174\23\31\26\0\3\31\6\0\7\31\4\0"+
    "\21\31\1\175\6\31\26\0\3\31\6\0\7\31\4\0"+
    "\20\31\1\176\1\177\6\31\26\0\3\31\6\0\7\31"+
    "\4\0\1\200\27\31\26\0\3\31\6\0\7\31\4\0"+
    "\1\201\27\31\26\0\3\31\6\0\7\31\4\0\14\31"+
    "\1\202\13\31\26\0\3\31\6\0\7\31\4\0\5\31"+
    "\1\203\22\31\26\0\3\31\6\0\7\31\4\0\22\31"+
    "\1\204\5\31\26\0\3\31\6\0\7\31\4\0\20\31"+
    "\1\205\7\31\26\0\3\31\6\0\7\31\4\0\21\31"+
    "\1\206\6\31\26\0\3\31\6\0\7\31\4\0\12\31"+
    "\1\207\15\31\26\0\3\31\6\0\7\31\4\0\14\31"+
    "\1\210\13\31\26\0\3\31\6\0\7\31\4\0\15\31"+
    "\1\211\12\31\26\0\3\31\6\0\7\31\4\0\17\31"+
    "\1\212\10\31\26\0\3\31\6\0\7\31\4\0\21\31"+
    "\1\213\6\31\26\0\3\31\6\0\7\31\4\0\16\31"+
    "\1\214\11\31\26\0\3\31\6\0\7\31\4\0\20\31"+
    "\1\215\1\216\6\31\26\0\3\31\6\0\7\31\4\0"+
    "\14\31\1\217\13\31\26\0\3\31\6\0\7\31\4\0"+
    "\21\31\1\220\6\31\26\0\3\31\6\0\7\31\4\0"+
    "\24\31\1\221\3\31\26\0\3\31\6\0\7\31\4\0"+
    "\12\31\1\222\15\31\26\0\3\31\6\0\7\31\4\0"+
    "\2\31\1\223\25\31\26\0\3\31\6\0\7\31\4\0"+
    "\10\31\1\224\4\31\1\225\12\31\26\0\3\31\6\0"+
    "\7\31\4\0\1\31\1\226\26\31\26\0\3\31\6\0"+
    "\7\31\4\0\21\31\1\227\6\31\26\0\3\31\6\0"+
    "\7\31\4\0\15\31\1\230\12\31\26\0\3\31\6\0"+
    "\7\31\4\0\1\231\27\31\26\0\3\31\6\0\7\31"+
    "\4\0\16\31\1\232\11\31\26\0\3\31\6\0\7\31"+
    "\4\0\10\31\1\233\17\31\26\0\3\31\6\0\7\31"+
    "\4\0\14\31\1\234\13\31\26\0\3\31\6\0\7\31"+
    "\4\0\10\31\1\235\6\31\1\236\10\31\26\0\3\31"+
    "\6\0\7\31\4\0\1\237\21\31\1\240\3\31\1\241"+
    "\1\31\26\0\3\31\6\0\7\31\4\0\10\31\1\242"+
    "\1\31\1\243\15\31\26\0\3\31\6\0\7\31\4\0"+
    "\10\31\1\244\17\31\5\0\3\103\1\0\7\103\1\165"+
    "\4\103\1\245\60\103\41\0\1\246\70\0\1\247\73\0"+
    "\3\31\6\0\7\31\4\0\21\31\1\250\6\31\26\0"+
    "\3\31\6\0\7\31\4\0\12\31\1\251\15\31\26\0"+
    "\3\31\6\0\7\31\4\0\1\252\27\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\253\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\254\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\2\31\1\255\25\31\26\0\3\31"+
    "\6\0\7\31\4\0\17\31\1\256\10\31\26\0\3\31"+
    "\6\0\7\31\4\0\20\31\1\257\7\31\26\0\3\31"+
    "\6\0\7\31\4\0\20\31\1\260\1\261\6\31\26\0"+
    "\3\31\6\0\7\31\4\0\1\262\27\31\26\0\3\31"+
    "\6\0\7\31\4\0\1\31\1\263\26\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\264\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\265\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\20\31\1\266\7\31\26\0\3\31"+
    "\6\0\7\31\4\0\1\267\27\31\26\0\3\31\6\0"+
    "\7\31\4\0\1\270\27\31\26\0\3\31\6\0\7\31"+
    "\4\0\15\31\1\271\12\31\26\0\3\31\6\0\7\31"+
    "\4\0\12\31\1\272\2\31\1\273\12\31\26\0\3\31"+
    "\6\0\7\31\4\0\21\31\1\274\6\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\275\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\6\31\1\276\21\31\26\0\3\31"+
    "\6\0\7\31\4\0\10\31\1\277\17\31\26\0\3\31"+
    "\6\0\7\31\4\0\12\31\1\300\15\31\26\0\3\31"+
    "\6\0\7\31\4\0\11\31\1\301\16\31\26\0\3\31"+
    "\6\0\7\31\4\0\23\31\1\302\4\31\26\0\3\31"+
    "\6\0\7\31\4\0\21\31\1\303\6\31\26\0\3\31"+
    "\6\0\7\31\4\0\12\31\1\304\15\31\26\0\3\31"+
    "\6\0\7\31\4\0\22\31\1\305\5\31\26\0\3\31"+
    "\6\0\7\31\4\0\17\31\1\306\10\31\26\0\3\31"+
    "\6\0\7\31\4\0\21\31\1\307\6\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\310\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\21\31\1\311\6\31\26\0\3\31"+
    "\6\0\7\31\4\0\2\31\1\312\25\31\26\0\3\31"+
    "\6\0\7\31\4\0\20\31\1\313\7\31\26\0\3\31"+
    "\6\0\7\31\4\0\15\31\1\314\12\31\26\0\3\31"+
    "\6\0\7\31\4\0\14\31\1\315\13\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\316\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\3\31\1\317\24\31\26\0\3\31"+
    "\6\0\7\31\4\0\1\320\27\31\26\0\3\31\6\0"+
    "\7\31\4\0\12\31\1\321\15\31\50\0\1\322\57\0"+
    "\3\31\6\0\7\31\4\0\17\31\1\323\10\31\26\0"+
    "\3\31\6\0\7\31\4\0\11\31\1\324\16\31\26\0"+
    "\3\31\6\0\7\31\4\0\7\31\1\325\20\31\26\0"+
    "\3\31\6\0\7\31\4\0\20\31\1\326\7\31\26\0"+
    "\3\31\6\0\7\31\4\0\21\31\1\327\6\31\26\0"+
    "\3\31\6\0\7\31\4\0\10\31\1\330\17\31\26\0"+
    "\3\31\6\0\7\31\4\0\22\31\1\331\5\31\26\0"+
    "\3\31\6\0\7\31\4\0\12\31\1\332\15\31\26\0"+
    "\3\31\6\0\7\31\4\0\14\31\1\333\13\31\26\0"+
    "\3\31\6\0\7\31\4\0\4\31\1\334\23\31\26\0"+
    "\3\31\6\0\7\31\4\0\12\31\1\335\15\31\26\0"+
    "\3\31\6\0\7\31\4\0\21\31\1\336\6\31\26\0"+
    "\3\31\6\0\7\31\4\0\4\31\1\337\23\31\26\0"+
    "\3\31\6\0\7\31\4\0\17\31\1\340\10\31\26\0"+
    "\3\31\6\0\7\31\4\0\1\341\27\31\26\0\3\31"+
    "\6\0\7\31\4\0\17\31\1\342\10\31\26\0\3\31"+
    "\6\0\7\31\4\0\23\31\1\343\4\31\26\0\3\31"+
    "\6\0\7\31\4\0\1\344\27\31\26\0\3\31\6\0"+
    "\7\31\4\0\1\345\27\31\26\0\3\31\6\0\7\31"+
    "\4\0\4\31\1\346\23\31\26\0\3\31\6\0\7\31"+
    "\4\0\10\31\1\347\17\31\26\0\3\31\6\0\7\31"+
    "\4\0\17\31\1\350\10\31\26\0\3\31\6\0\7\31"+
    "\4\0\21\31\1\351\6\31\26\0\3\31\6\0\7\31"+
    "\4\0\10\31\1\352\17\31\26\0\3\31\6\0\7\31"+
    "\4\0\17\31\1\353\10\31\26\0\3\31\6\0\7\31"+
    "\4\0\2\31\1\354\25\31\26\0\3\31\6\0\7\31"+
    "\4\0\7\31\1\355\20\31\26\0\3\31\6\0\7\31"+
    "\4\0\24\31\1\356\3\31\26\0\3\31\6\0\7\31"+
    "\4\0\20\31\1\357\7\31\26\0\3\31\6\0\7\31"+
    "\4\0\21\31\1\360\6\31\26\0\3\31\6\0\7\31"+
    "\4\0\4\31\1\361\23\31\46\0\1\362\61\0\3\31"+
    "\6\0\7\31\4\0\1\363\27\31\26\0\3\31\6\0"+
    "\7\31\4\0\14\31\1\364\13\31\26\0\3\31\6\0"+
    "\7\31\4\0\12\31\1\365\15\31\26\0\3\31\6\0"+
    "\7\31\4\0\4\31\1\366\23\31\26\0\3\31\6\0"+
    "\7\31\4\0\3\31\1\367\24\31\26\0\3\31\6\0"+
    "\7\31\4\0\12\31\1\370\15\31\26\0\3\31\6\0"+
    "\7\31\4\0\13\31\1\371\14\31\26\0\3\31\6\0"+
    "\7\31\4\0\21\31\1\372\6\31\26\0\3\31\6\0"+
    "\7\31\4\0\14\31\1\373\13\31\26\0\3\31\6\0"+
    "\7\31\4\0\5\31\1\374\22\31\26\0\3\31\6\0"+
    "\7\31\4\0\4\31\1\375\23\31\26\0\3\31\6\0"+
    "\7\31\4\0\6\31\1\376\21\31\26\0\3\31\6\0"+
    "\7\31\4\0\21\31\1\377\6\31\26\0\3\31\6\0"+
    "\7\31\4\0\2\31\1\u0100\25\31\26\0\3\31\6\0"+
    "\7\31\4\0\2\31\1\u0101\25\31\26\0\3\31\6\0"+
    "\7\31\4\0\14\31\1\u0102\13\31\26\0\3\31\6\0"+
    "\7\31\4\0\2\31\1\u0103\25\31\26\0\3\31\6\0"+
    "\7\31\4\0\7\31\1\u0104\20\31\26\0\3\31\6\0"+
    "\7\31\4\0\17\31\1\u0105\10\31\26\0\3\31\6\0"+
    "\7\31\4\0\20\31\1\u0106\7\31\26\0\3\31\6\0"+
    "\7\31\4\0\10\31\1\u0107\17\31\26\0\3\31\6\0"+
    "\7\31\4\0\10\31\1\u0108\17\31\26\0\1\u0109\101\0"+
    "\3\31\6\0\7\31\4\0\2\31\1\u010a\25\31\26\0"+
    "\3\31\6\0\7\31\4\0\22\31\1\u010b\5\31\26\0"+
    "\3\31\6\0\7\31\4\0\21\31\1\u010c\6\31\26\0"+
    "\3\31\6\0\7\31\4\0\20\31\1\u010d\7\31\26\0"+
    "\3\31\6\0\7\31\4\0\26\31\1\u010e\1\31\26\0"+
    "\3\31\6\0\7\31\4\0\4\31\1\u010f\23\31\26\0"+
    "\3\31\6\0\7\31\4\0\2\31\1\u0110\25\31\26\0"+
    "\3\31\6\0\7\31\4\0\1\u0111\27\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\u0112\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\u0113\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\21\31\1\u0114\6\31\26\0\3\31"+
    "\6\0\7\31\4\0\15\31\1\u0115\12\31\26\0\3\31"+
    "\6\0\7\31\4\0\4\31\1\u0116\23\31\26\0\3\31"+
    "\6\0\7\31\4\0\12\31\1\u0117\15\31\23\0\1\u0118"+
    "\104\0\3\31\6\0\7\31\4\0\21\31\1\u0119\6\31"+
    "\26\0\3\31\6\0\7\31\4\0\4\31\1\u011a\23\31"+
    "\26\0\3\31\6\0\7\31\4\0\14\31\1\u011b\13\31"+
    "\26\0\3\31\6\0\7\31\4\0\4\31\1\u011c\23\31"+
    "\26\0\3\31\6\0\7\31\4\0\2\31\1\u011d\25\31"+
    "\26\0\3\31\6\0\7\31\4\0\4\31\1\u011e\23\31"+
    "\26\0\3\31\6\0\7\31\4\0\14\31\1\u011f\13\31"+
    "\26\0\3\31\6\0\7\31\4\0\14\31\1\u0120\13\31"+
    "\26\0\3\31\6\0\7\31\4\0\4\31\1\u0121\23\31"+
    "\30\0\1\u0122\77\0\3\31\6\0\7\31\4\0\21\31"+
    "\1\u0123\6\31\26\0\3\31\6\0\7\31\4\0\15\31"+
    "\1\u0124\12\31\26\0\3\31\6\0\7\31\4\0\4\31"+
    "\1\u0125\23\31\26\0\3\31\6\0\7\31\4\0\3\31"+
    "\1\u0126\24\31\26\0\3\31\6\0\7\31\4\0\10\31"+
    "\1\u0127\17\31\26\0\3\31\6\0\7\31\4\0\21\31"+
    "\1\u0128\6\31\52\0\1\u0129\55\0\3\31\6\0\7\31"+
    "\4\0\20\31\1\u012a\7\31\26\0\3\31\6\0\7\31"+
    "\4\0\5\31\1\u012b\22\31\26\0\3\31\6\0\7\31"+
    "\4\0\27\31\1\u012c\23\0\1\u012d\104\0\3\31\6\0"+
    "\7\31\4\0\4\31\1\u012e\23\31\57\0\1\u012f\50\0"+
    "\3\31\6\0\7\31\4\0\3\31\1\u0130\24\31\37\0"+
    "\1\u0131\65\0\1\u0132\121\0\1\u0133\106\0\1\u0134\52\0"+
    "\1\u0135\65\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14718];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\1\1\1\11"+
    "\3\1\2\11\3\1\1\11\5\1\2\11\21\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\3\11\2\0\5\11"+
    "\1\0\1\1\1\11\1\0\1\1\3\11\1\1\1\11"+
    "\45\1\3\11\2\0\2\11\55\1\1\0\1\11\52\1"+
    "\1\0\37\1\1\0\26\1\1\0\16\1\1\0\11\1"+
    "\1\0\6\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public WandLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WandLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 114: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 115: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 116: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 117: break;
          case 5:
            { return BIN_AND;
            }
          // fall through
          case 118: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 119: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 120: break;
          case 8:
            { return MULT;
            }
          // fall through
          case 121: break;
          case 9:
            { return ADD;
            }
          // fall through
          case 122: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 123: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 124: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 125: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 126: break;
          case 14:
            { return DIGITS;
            }
          // fall through
          case 127: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 128: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 129: break;
          case 17:
            { return LT;
            }
          // fall through
          case 130: break;
          case 18:
            { return ASSIGN;
            }
          // fall through
          case 131: break;
          case 19:
            { return GT;
            }
          // fall through
          case 132: break;
          case 20:
            { return QUESTION;
            }
          // fall through
          case 133: break;
          case 21:
            { return IDENTIFIER;
            }
          // fall through
          case 134: break;
          case 22:
            { return DOUBLE_BIG_POST;
            }
          // fall through
          case 135: break;
          case 23:
            { return EXP_BIG;
            }
          // fall through
          case 136: break;
          case 24:
            { return FLOAT_BIG_POST;
            }
          // fall through
          case 137: break;
          case 25:
            { return LONG_BIG_POST;
            }
          // fall through
          case 138: break;
          case 26:
            { return LBRACK;
            }
          // fall through
          case 139: break;
          case 27:
            { return RBRACK;
            }
          // fall through
          case 140: break;
          case 28:
            { return BIN_XOR;
            }
          // fall through
          case 141: break;
          case 29:
            { return DOUBLE_SMALL_POST;
            }
          // fall through
          case 142: break;
          case 30:
            { return EXP_SMALL;
            }
          // fall through
          case 143: break;
          case 31:
            { return FLOAT_SMALL_POST;
            }
          // fall through
          case 144: break;
          case 32:
            { return LONG_SMALL_POST;
            }
          // fall through
          case 145: break;
          case 33:
            { return LBRACE;
            }
          // fall through
          case 146: break;
          case 34:
            { return BIN_OR;
            }
          // fall through
          case 147: break;
          case 35:
            { return RBRACE;
            }
          // fall through
          case 148: break;
          case 36:
            { return BIN_NOT;
            }
          // fall through
          case 149: break;
          case 37:
            { return NE;
            }
          // fall through
          case 150: break;
          case 38:
            { return STRING_LITERAL;
            }
          // fall through
          case 151: break;
          case 39:
            { return MOD_ASSIGN;
            }
          // fall through
          case 152: break;
          case 40:
            { return AND;
            }
          // fall through
          case 153: break;
          case 41:
            { return BIN_AND_ASSIGN;
            }
          // fall through
          case 154: break;
          case 42:
            { return MUL_ASSIGN;
            }
          // fall through
          case 155: break;
          case 43:
            { return INC;
            }
          // fall through
          case 156: break;
          case 44:
            { return ADD_ASSIGN;
            }
          // fall through
          case 157: break;
          case 45:
            { return DEC;
            }
          // fall through
          case 158: break;
          case 46:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 159: break;
          case 47:
            { return LINE_COMMENT;
            }
          // fall through
          case 160: break;
          case 48:
            { return DIV_ASSIGN;
            }
          // fall through
          case 161: break;
          case 49:
            { return LSHIFT;
            }
          // fall through
          case 162: break;
          case 50:
            { return LE;
            }
          // fall through
          case 163: break;
          case 51:
            { return EQ;
            }
          // fall through
          case 164: break;
          case 52:
            { return GE;
            }
          // fall through
          case 165: break;
          case 53:
            { return RSHIFT;
            }
          // fall through
          case 166: break;
          case 54:
            { return BIN_XOR_ASSIGN;
            }
          // fall through
          case 167: break;
          case 55:
            { return DO;
            }
          // fall through
          case 168: break;
          case 56:
            { return IF;
            }
          // fall through
          case 169: break;
          case 57:
            { return BIN_OR_ASSIGN;
            }
          // fall through
          case 170: break;
          case 58:
            { return OR;
            }
          // fall through
          case 171: break;
          case 59:
            { return CHAR_LITERAL;
            }
          // fall through
          case 172: break;
          case 60:
            { return LSHIFT_ASSIGN;
            }
          // fall through
          case 173: break;
          case 61:
            { return RSHIFT_ASSIGN;
            }
          // fall through
          case 174: break;
          case 62:
            { return URSHIFT;
            }
          // fall through
          case 175: break;
          case 63:
            { return FOR;
            }
          // fall through
          case 176: break;
          case 64:
            { return INT;
            }
          // fall through
          case 177: break;
          case 65:
            { return NEW;
            }
          // fall through
          case 178: break;
          case 66:
            { return TRY;
            }
          // fall through
          case 179: break;
          case 67:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 180: break;
          case 68:
            { return URSHIFT_ASSIGN;
            }
          // fall through
          case 181: break;
          case 69:
            { return BOOL;
            }
          // fall through
          case 182: break;
          case 70:
            { return BYTE;
            }
          // fall through
          case 183: break;
          case 71:
            { return CASE;
            }
          // fall through
          case 184: break;
          case 72:
            { return CHAR;
            }
          // fall through
          case 185: break;
          case 73:
            { return ELSE;
            }
          // fall through
          case 186: break;
          case 74:
            { return GOTO;
            }
          // fall through
          case 187: break;
          case 75:
            { return LONG;
            }
          // fall through
          case 188: break;
          case 76:
            { return NULL;
            }
          // fall through
          case 189: break;
          case 77:
            { return THIS;
            }
          // fall through
          case 190: break;
          case 78:
            { return TRUE;
            }
          // fall through
          case 191: break;
          case 79:
            { return VOID;
            }
          // fall through
          case 192: break;
          case 80:
            { return BREAK;
            }
          // fall through
          case 193: break;
          case 81:
            { return CATCH;
            }
          // fall through
          case 194: break;
          case 82:
            { return CLASS;
            }
          // fall through
          case 195: break;
          case 83:
            { return CONST;
            }
          // fall through
          case 196: break;
          case 84:
            { return FALSE;
            }
          // fall through
          case 197: break;
          case 85:
            { return FINAL;
            }
          // fall through
          case 198: break;
          case 86:
            { return FLOAT;
            }
          // fall through
          case 199: break;
          case 87:
            { return SHORT;
            }
          // fall through
          case 200: break;
          case 88:
            { return SUPER;
            }
          // fall through
          case 201: break;
          case 89:
            { return THROW;
            }
          // fall through
          case 202: break;
          case 90:
            { return WHILE;
            }
          // fall through
          case 203: break;
          case 91:
            { return DOUBLE;
            }
          // fall through
          case 204: break;
          case 92:
            { return IMPORT;
            }
          // fall through
          case 205: break;
          case 93:
            { return NATIVE;
            }
          // fall through
          case 206: break;
          case 94:
            { return PUBLIC;
            }
          // fall through
          case 207: break;
          case 95:
            { return RETURN;
            }
          // fall through
          case 208: break;
          case 96:
            { return STATIC;
            }
          // fall through
          case 209: break;
          case 97:
            { return SWITCH;
            }
          // fall through
          case 210: break;
          case 98:
            { return THROWS;
            }
          // fall through
          case 211: break;
          case 99:
            { return DEFAULT;
            }
          // fall through
          case 212: break;
          case 100:
            { return EXTENDS;
            }
          // fall through
          case 213: break;
          case 101:
            { return FINALLY;
            }
          // fall through
          case 214: break;
          case 102:
            { return PACKAGE;
            }
          // fall through
          case 215: break;
          case 103:
            { return PRIVATE;
            }
          // fall through
          case 216: break;
          case 104:
            { return ABSTRACT;
            }
          // fall through
          case 217: break;
          case 105:
            { return CONTINUE;
            }
          // fall through
          case 218: break;
          case 106:
            { return VOLATILE;
            }
          // fall through
          case 219: break;
          case 107:
            { return INTERFACE;
            }
          // fall through
          case 220: break;
          case 108:
            { return PROTECTED;
            }
          // fall through
          case 221: break;
          case 109:
            { return TRANSIENT;
            }
          // fall through
          case 222: break;
          case 110:
            { return IMPLEMENTS;
            }
          // fall through
          case 223: break;
          case 111:
            { return INSTANCEOF;
            }
          // fall through
          case 224: break;
          case 112:
            { return SYNCHRONIZED;
            }
          // fall through
          case 225: break;
          case 113:
            { return HEX_DIGITS;
            }
          // fall through
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
